(module haskell-typechecker mzscheme
  (require (only (lib "1.ss" "srfi") make-list unzip2 zip)
           (lib "haskell-compiler.ss" "hs")
           (lib "haskell-prelude.ss" "hs")
           (lib "haskell-terms.ss" "hs")
           (lib "haskell-types.ss" "hs")
           (only (lib "list.ss") foldl)
           (lib "match.ss")
           (lib "test.ss" "hs"))
  
  (provide valid-type)
  
  (define (valid-type term)
    (term-type null term)
    #t)
  
  ; check-types
  (define (term-type context term)
    (match term
      (($ application-term f a) (let ((f-type (term-type context f))
                                      (a-types (map (lambda (x) (term-type context x)) a)))
                                  (if (function-type? f-type)
                                      (let ((f-types (function-type-types f-type)))
                                        (if (not (equal? (reverse (cdr (reverse f-types))) a-types))
                                            (error 'term-type "param and arg types don't match")
                                            (car (reverse f-types))))
                                      (error 'term-type "applied term not a function"))))
      (($ case-term _ a) (term-type context (cdr (car a))))
      (($ character-term _) (make-character-type))
      (($ declaration-term p e t) (let ((translated-type (translate-type t)))
                                    (if (equal? (length p) 1)
                                        (let ((e-type (term-type context e)))
                                          (if (equal? translated-type e-type)
                                              translated-type
                                              (error 'term-type "expected type '~a', found type '~a'" translated-type e-type)))
                                        (let ((f-type (term-type context (make-function-term (cdr p) e translated-type))))
                                          (if (equal? translated-type f-type)
                                              translated-type
                                              (error 'term-type "expected type '~a', found type '~a'" translated-type f-type))))))
      (($ float-term _) (make-float-type))
      (($ function-term p b t) (let* ((translated-type (translate-type t))
                                      (f-type (function-type-types translated-type)))
                                 (if (equal? (+ (length p) 1) (length f-type))
                                     (let ((b-type (term-type (append (zip p (reverse (cdr (reverse f-type)))) context) b)))
                                       (if (equal? b-type (car (reverse f-type))) translated-type (error 'term-type "body type doesn't match given type")))
                                     (error 'term-type "missing or extra param types"))))
      (($ identifier-term i) (if (member i prelude)
                                 (eval (string->symbol (string-append "haskell-type:" i)))
                                 (let ((item (assoc i context)))
                                   (if (pair? item)
                                       (list-ref item 1)
                                       (error 'term-type "free variable")))))
      (($ if-term g t e) (let ((g-type (term-type context g))
                               (t-type (term-type context t))
                               (e-type (term-type context e)))
                           (if (and (equal? g-type (make-boolean-type)) (equal? t-type e-type)) t-type (error 'term-type "bad if types"))))
      (($ integer-term _) (make-integer-type))
      (($ let-term d e) (term-type (append (map (lambda (x) (list (car (declaration-term-patterns x)) (term-type context x))) d) context) e))))
  
  (define (translate-type type)
    (match type
      (($ type-constructor "Bool") (make-boolean-type))
      (($ type-constructor "Char") (make-character-type))
      (($ type-constructor "Int") (make-integer-type))
      (($ type-constructor "Integer") (make-integer-type))
      (($ type-constructor "Float") (make-float-type))
      (($ function-type t) (make-function-type (map translate-type t)))
      (x x)))
  
  (define type-variable-count 0)
  
  (define (fresh-type-variable)
    (set! type-variable-count (+ type-variable-count 1))
    (make-type-variable (string-append "t" (number->string type-variable-count))))
  
  (define-struct constraint (left right) #f)
  
  (define (lunzip2 x)
    (let-values (((x y) (unzip2 x))) (list x y)))
  
  (define (reconstruct-types context term)
    (match term
      (($ application-term f a) (match-let* (((f-type f-constraints) (reconstruct-types context f))
                                             ((a-types a-constraints) (lunzip2 (map (lambda (x) (reconstruct-types context x)) a)))
                                             (type (fresh-type-variable))
                                             (constraints (cons (make-constraint f-type (make-function-type (append a-types (list type))))
                                                                (append f-constraints (foldl append null a-constraints)))))
                                  (list type constraints)))
      #;(($ case-term e a) (match-let* (((e-type e-constraints) (reconstruct-types context e)) ; need to add constraints between e and patterns
                                        ((a-types a-constraints) (lunzip2 (map (lambda (x) (reconstruct-types (cons (list (car x) e-type) context) (cdr x))) a))))
                             (list (car a-types) (append e-constraints (foldl append null a-constraints)))))
      (($ character-term c) (list (make-character-type) null))
      (($ declaration-term p e t) (if (equal? (length p) 1)
                                      (match-let (((type constraints) (reconstruct-types context e)))
                                        (list type (cons (make-constraint (list-ref (assoc (car p) context) 1) type) constraints)))
                                      (match-let (((type constraints) (reconstruct-types context (make-function-term (cdr p) e t))))
                                        (list type (cons (make-constraint (list-ref (assoc (car p) context) 1) type) constraints)))))
      (($ float-term f) (list (make-float-type) null))
      (($ function-term p b _) (match-let* ((p-types (map (lambda (x) (fresh-type-variable)) p)) 
                                            ((type constraints) (reconstruct-types (append (zip p p-types) context) b)))
                                 (list (make-function-type (append p-types (list type))) constraints)))
      (($ identifier-term i) (match (assoc i context)
                               ((_ type) (list type null))
                               (_ (error 'reconstruct-types "free variable: ~a" i))))
      (($ if-term g t e) (match-let (((g-type g-constraints) (reconstruct-types context g))
                                     ((t-type t-constraints) (reconstruct-types context t))
                                     ((e-type e-constraints) (reconstruct-types context e)))
                           (list t-type (append g-constraints t-constraints e-constraints (list (make-constraint g-type (make-boolean-type))
                                                                                                (make-constraint t-type e-type))))))
      (($ integer-term i) (list (make-integer-type) null))
      (($ let-term d e) (match-let* ((context-2 (append (map (lambda (x) (list (car (declaration-term-patterns x)) (fresh-type-variable))) d) context))
                                     ((d-types d-constraints) (lunzip2 (map (lambda (x) (reconstruct-types context-2 x)) d)))
                                     ((e-type e-constraints) (reconstruct-types context-2 e)))
                          (list e-type (append (foldl append null d-constraints) e-constraints))))
      (($ list-term e) (if (null? e)
                           (list (make-list-type (fresh-type-variable)) null)
                           (match-let ((((head-type . tail-types) e-constraints) (lunzip2 (map (lambda (x) (reconstruct-types context x)) e))))
                             (list (make-list-type head-type)
                                   (append (map (lambda (x) (make-constraint head-type x)) tail-types)
                                           (foldl append null e-constraints))))))
      ;(($ module-term i d) 
      (($ tuple-term e) (match-let (((e-types e-constraints) (lunzip2 (map (lambda (x) (reconstruct-types context x)) e))))
                          (list (make-tuple-type e-types) (foldl append null e-constraints))))
      (($ tuplecon-term a) (let ((types (map (lambda (x) (fresh-type-variable)) (make-list a))))
                             (list (make-function-type (append types (list (make-tuple-type types)))) null)))
      ))
  
  (define rt reconstruct-types)
  
  (define (reconstruct-module-types module)
    (match-let* ((decls (module-term-declarations module))
                 (context (map (lambda (x) (list (car (declaration-term-patterns x)) (fresh-type-variable))) decls))
                 ((_ constraints) (lunzip2 (map (lambda (x) (reconstruct-types context x)) decls))))
      (foldl append null constraints)))
  
  (define (unify-constraints constraints)
    (define (contains-type? container-type containee-type)
      (if (equal? container-type containee-type)
          #t
          (match container-type
            (($ function-type t) (foldl (lambda (x y) (or x y)) #f (map (lambda (x) (contains-type? x containee-type)) t)))
            (($ list-type t) (contains-type? t containee-type))
            (($ tuple-type t) (foldl (lambda (x y) (or x y)) #f (map (lambda (x) (contains-type? x containee-type)) t)))
            (_ #f))))
    (define (substitute-constraints-type constraints from-type to-type)
      (define (substitute-type from-type to-type type)
        (if (equal? from-type type)
            to-type
            (match type
              (($ function-type t) (make-function-type (map (lambda (x) (substitute-type from-type to-type x)) t)))
              (($ list-type t) (make-list-type (substitute-type from-type to-type t)))
              (($ tuple-type t) (make-tuple-type (map (lambda (x) (substitute-type from-type to-type x)) t)))
              (t t))))
      (map (match-lambda (($ constraint left-type right-type) (make-constraint (substitute-type from-type to-type left-type)
                                                                               (substitute-type from-type to-type right-type)))) constraints))
    (match constraints
      ((($ constraint left-type right-type) . rest) (cond ((equal? left-type right-type)
                                                           (unify-constraints rest))
                                                          ((and (type-variable? left-type)
                                                                (not (contains-type? right-type left-type)))
                                                           (cons (list left-type right-type)
                                                                 (unify-constraints (substitute-constraints-type rest left-type right-type))))
                                                          ((and (type-variable? right-type)
                                                                (not (contains-type? left-type right-type)))
                                                           (cons (list right-type left-type)
                                                                 (unify-constraints (substitute-constraints-type rest right-type left-type))))
                                                          ((and (function-type? left-type)
                                                                (function-type? right-type)
                                                                #;(equal? (length (function-type-types left-type)) (length (function-type-types right-type))))
                                                           (unify-constraints (append (zip (function-type-types left-type) (function-type-types right-type)) rest)))
                                                          (else (error 'unify-constraints "cannot unify constraint: ~a = ~a" left-type right-type))))
      (() null)))
  
  (define tests2
    (list (make-test "application-term 1"
                     (make-application-term (make-function-term (list "x")
                                                                (make-identifier-term "x")
                                                                (make-function-type (list (make-integer-type)
                                                                                          (make-integer-type))))
                                            (list (make-integer-term "2")))
                     (make-integer-type))
          (make-test "application-term 2"
                     (make-application-term (make-function-term (list "x" "y")
                                                                (make-identifier-term "y")
                                                                (make-function-type (list (make-integer-type)
                                                                                          (make-character-type)
                                                                                          (make-character-type))))
                                            (list (make-integer-term "2")
                                                  (make-character-term "c")))
                     (make-character-type))
          (make-test "application-term 3"
                     (make-application-term (make-function-term (list "x")
                                                                (make-character-term "c")
                                                                (make-function-type (list (make-integer-type)
                                                                                          (make-character-type))))
                                            (list (make-integer-term "2")))
                     (make-character-type))
          (make-test "case-term 1"
                     (make-case-term (make-integer-term "2")
                                     (list (cons "x" (make-character-term "c"))))
                     (make-character-type))
          (make-test "character-term 1"
                     (make-character-term "c")
                     (make-character-type))
          (make-test "declaration-term 1"
                     (make-declaration-term (list "x")
                                            (make-integer-term "2")
                                            (make-integer-type))
                     (make-integer-type))
          (make-test "declaration-term 2"
                     (make-declaration-term (list "x" "y")
                                            (make-integer-term "2")
                                            (make-function-type (list (make-character-type)
                                                                      (make-integer-type))))
                     (make-function-type (list (make-character-type)
                                               (make-integer-type))))
          (make-test "float-term 1"
                     (make-float-term "c")
                     (make-float-type))
          (make-test "function-term 1"
                     (make-function-term (list "x")
                                         (make-identifier-term "x")
                                         (make-function-type (list (make-integer-type)
                                                                   (make-integer-type))))
                     (make-function-type (list (make-integer-type)
                                               (make-integer-type))))
          (make-test "function-term 2"
                     (make-function-term (list "x")
                                         (make-integer-term "2")
                                         (make-function-type (list (make-character-type)
                                                                   (make-integer-type))))
                     (make-function-type (list (make-character-type)
                                               (make-integer-type))))
          (make-test "function-term 3"
                     (make-function-term (list "x" "y")
                                         (make-integer-term "2")
                                         (make-function-type (list (make-character-type)
                                                                   (make-boolean-type)
                                                                   (make-integer-type))))
                     (make-function-type (list (make-character-type)
                                               (make-boolean-type)
                                               (make-integer-type))))
          (make-test "identifier-term 1"
                     (make-identifier-term "+")
                     (make-function-type (list (make-integer-type)
                                               (make-integer-type)
                                               (make-integer-type))))
          (make-test "if-term 1"
                     (make-if-term (make-identifier-term "True")
                                   (make-integer-term "1")
                                   (make-integer-term "2"))
                     (make-integer-type))
          (make-test "integer-term 1"
                     (make-integer-term "1")
                     (make-integer-type))
          (make-test "let-term 1"
                     (make-let-term (list (make-declaration-term (list "x")
                                                                 (make-integer-term "1")
                                                                 (make-integer-type)))
                                    (make-integer-term "1"))
                     (make-integer-type))
          (make-test "let-term 2"
                     (make-let-term (list (make-declaration-term (list "x")
                                                                 (make-integer-term "1")
                                                                 (make-integer-type)))
                                    (make-identifier-term "x"))
                     (make-integer-type))
          (make-test "let-term 3"
                     (make-let-term (list (make-declaration-term (list "x")
                                                                 (make-character-term "a")
                                                                 (make-character-type))
                                          (make-declaration-term (list "y")
                                                                 (make-character-term "b")
                                                                 (make-character-type)))
                                    (make-integer-term "1"))
                     (make-integer-type))))
  
  #;(define (run-all-tests)
      (run-tests (lambda (x) (set! type-variable-count 0) (reconstruct-types null x)) tests)))