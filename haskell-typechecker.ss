(module haskell-typechecker mzscheme
  (require (lib "haskell-compiler.ss" "hs")
           (lib "haskell-terms.ss" "hs")
           (lib "haskell-types.ss" "hs")
           (lib "list.ss" "srfi" "1")
           (lib "match.ss")
           (lib "test.ss" "hs"))
  
  (provide valid-type)
  
  (define (valid-type term)
    (term-type null term)
    #t)
  
  (define (term-type context term)
    (match term
      (($ application-term f a) (let ((f-type (term-type context f))
                                      (a-types (map (lambda (x) (term-type context x)) a)))
                                  (if (function-type? f-type)
                                      (let ((f-types (function-type-types f-type)))
                                        (if (not (equal? (reverse (cdr (reverse f-types))) a-types))
                                            (error 'term-type "param and arg types don't match")
                                            (car (reverse f-types))))
                                      (error 'term-type "applied term not a function"))))
      (($ case-term _ a) (term-type context (cdr (car a))))
      (($ character-term _) (make-character-type))
      (($ declaration-term p e t) (let ((translated-type (translate-type t)))
                                    (if (equal? (length p) 1)
                                        (let ((e-type (term-type context e)))
                                          (if (equal? translated-type e-type)
                                              translated-type
                                              (error 'term-type "expected type '~a', found type '~a'" translated-type e-type)))
                                        (let ((f-type (term-type context (make-function-term (cdr p) e translated-type))))
                                          (if (equal? translated-type f-type)
                                              translated-type
                                              (error 'term-type "expected type '~a', found type '~a'" translated-type f-type))))))
      (($ float-term _) (make-float-type))
      (($ function-term p b t) (let* ((translated-type (translate-type t))
                                     (f-type (function-type-types translated-type)))
                                 (if (equal? (+ (length p) 1) (length f-type))
                                     (let ((b-type (term-type (append (zip p (reverse (cdr (reverse f-type)))) context) b)))
                                       (if (equal? b-type (car (reverse f-type))) translated-type (error 'term-type "body type doesn't match given type")))
                                     (error 'term-type "missing or extra param types"))))
      (($ identifier-term i) (cond ((equal? i "True") (make-boolean-type))
                                   ((equal? i "False") (make-boolean-type))
                                   (else (let ((item (assoc i context)))
                                           (if (pair? item)
                                               (list-ref item 1)
                                               (error 'term-type "free variable"))))))
      (($ if-term g t e) (let ((g-type (term-type context g))
                               (t-type (term-type context t))
                               (e-type (term-type context e)))
                           (if (and (equal? g-type (make-boolean-type)) (equal? t-type e-type)) t-type (error 'term-type "bad if types"))))
      (($ integer-term _) (make-integer-type))
      (($ let-term d e) (term-type (append (map (lambda (x) (list (car (declaration-term-patterns x)) (term-type context x))) d) context) e))))
  
  (define (translate-type type)
    (match type
      (($ type-constructor "Bool") (make-boolean-type))
      (($ type-constructor "Char") (make-character-type))
      (($ type-constructor "Int") (make-integer-type))
      (($ type-constructor "Integer") (make-integer-type))
      (($ type-constructor "Float") (make-float-type))
      (($ function-type t) (make-function-type (map translate-type t)))
      (x x)))
  
  (define tests
    (list (make-test "application-term 1"
                     (make-application-term (make-function-term (list "x")
                                                                (make-identifier-term "x")
                                                                (make-function-type (list (make-integer-type)
                                                                                          (make-integer-type))))
                                            (list (make-integer-term "2")))
                     (make-integer-type))
          (make-test "application-term 2"
                     (make-application-term (make-function-term (list "x" "y")
                                                                (make-identifier-term "y")
                                                                (make-function-type (list (make-integer-type)
                                                                                          (make-character-type)
                                                                                          (make-character-type))))
                                            (list (make-integer-term "2")
                                                  (make-character-term "c")))
                     (make-character-type))
          (make-test "application-term 3"
                     (make-application-term (make-function-term (list "x")
                                                                (make-character-term "c")
                                                                (make-function-type (list (make-integer-type)
                                                                                          (make-character-type))))
                                            (list (make-integer-term "2")))
                     (make-character-type))
          (make-test "case-term 1"
                     (make-case-term (make-integer-term "2")
                                     (list (cons "x" (make-character-term "c"))))
                     (make-character-type))
          (make-test "character-term 1"
                     (make-character-term "c")
                     (make-character-type))
          (make-test "declaration-term 1"
                     (make-declaration-term (list "x")
                                            (make-integer-term "2")
                                            (make-integer-type))
                     (make-integer-type))
          (make-test "declaration-term 2"
                     (make-declaration-term (list "x" "y")
                                            (make-integer-term "2")
                                            (make-function-type (list (make-character-type)
                                                                      (make-integer-type))))
                     (make-function-type (list (make-character-type)
                                               (make-integer-type))))
          (make-test "float-term 1"
                     (make-float-term "c")
                     (make-float-type))
          (make-test "function-term 1"
                     (make-function-term (list "x")
                                         (make-identifier-term "x")
                                         (make-function-type (list (make-integer-type)
                                                                   (make-integer-type))))
                     (make-function-type (list (make-integer-type)
                                               (make-integer-type))))
          (make-test "function-term 2"
                     (make-function-term (list "x")
                                         (make-integer-term "2")
                                         (make-function-type (list (make-character-type)
                                                                   (make-integer-type))))
                     (make-function-type (list (make-character-type)
                                               (make-integer-type))))
          (make-test "function-term 3"
                     (make-function-term (list "x" "y")
                                         (make-integer-term "2")
                                         (make-function-type (list (make-character-type)
                                                                   (make-boolean-type)
                                                                   (make-integer-type))))
                     (make-function-type (list (make-character-type)
                                               (make-boolean-type)
                                               (make-integer-type))))
          (make-test "if-term 1"
                     (make-if-term (make-identifier-term "True")
                                   (make-integer-term "1")
                                   (make-integer-term "2"))
                     (make-integer-type))
          (make-test "integer-term 1"
                     (make-integer-term "1")
                     (make-integer-type))
          (make-test "let-term 1"
                     (make-let-term (list (make-declaration-term (list "x")
                                                                 (make-integer-term "1")
                                                                 (make-integer-type)))
                                    (make-integer-term "1"))
                     (make-integer-type))
          (make-test "let-term 2"
                     (make-let-term (list (make-declaration-term (list "x")
                                                                 (make-integer-term "1")
                                                                 (make-integer-type)))
                                    (make-identifier-term "x"))
                     (make-integer-type))
          (make-test "let-term 3"
                     (make-let-term (list (make-declaration-term (list "x")
                                                                 (make-character-term "a")
                                                                 (make-character-type))
                                          (make-declaration-term (list "y")
                                                                 (make-character-term "b")
                                                                 (make-character-type)))
                                    (make-integer-term "1"))
                     (make-integer-type))))
  
  (define (run-all-tests)
    (run-tests (lambda (x) (term-type null x)) tests)))