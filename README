Author: Will Faught (wfaught@calpoly.edu)
Date: May 6, 2008

1. GRAMMAR

A subset of the Haskell 98 grammar, extended with a Scheme embedding expression, is supported.

The following notable grammar is not supported:

  - Layout

    Braces and semicolons must be used where appropriate.

  - Pattern matching

    Only variable patterns are supported.

  - Infix application

    Binary functions must be applied in prefix position.  For example, (:) 1 [2] instead of 1 : [2].

  - Conditional and case expressions

    Conditional expressions are not supported yet because data types are not yet supported.  Case expressions are useless without pattern matching.

  - Parameterized data types

    Data type variables are not supported.  Types must appear alone on the left hand side of a data type declaration.

  - Anonymous data fields

    Data fields must be named since pattern matching is not supported.  For example, data Tree = Branch { left, right :: Tree } | Leaf { leaf :: Int }.  Empty braces for empty data constructors can be included or excluded.  For example, data Bool = True {} | False.

Many other grammar features are also not supported, but too numerous to enumerate here.  Stick to the "basics" or check the parser definition in parsers.ss to be sure you use correct grammar.

The Scheme embedding expression grammar is:

  :scheme <type> "<identifier>"

where <type> is a Haskell type and <identifier> is a Scheme identifier defined in primitives.ss.

2. EXTENSIONS

The Bool type is built in and satisfies the declaration data Bool = True | False.

Since pattern matching is not supported, special predicates are generated for every data constructor C of type T of the form isC :: T -> Bool.  For example, for the type Bool, the predicates isTrue :: Bool -> Bool and isFalse :: Bool -> Bool are generated.

3. RUNNING

Put the following line at the top of any Haskell file:

#reader (lib "reader.ss" "haskell")

The file can then be run.  All top-level Haskell identifiers are prefixed with "scheme:", but exported unchanged.

4. REMARKS

See lib/Test.hs for an example of the supported grammar in use.
