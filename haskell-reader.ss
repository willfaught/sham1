(module haskell-reader mzscheme
  (require (lib "lex.ss" "parser-tools")
           (prefix : (lib "lex-sre.ss" "parser-tools"))
           (lib "yacc.ss" "parser-tools")
           (lib "readerr.ss" "syntax")
           "haskell-compiler.ss")

  (provide (rename read-haskell-syntax read-syntax))
  
  (define-lex-abbrevs
    (hwhitespace (:: hwhitestuff (:* hwhitestuff)))
    (hwhitestuff (:or hwhitechar hcomment hncomment))
    (hwhitechar (:or hnewline hvertab hspace htab))
    (hnewline (:or (:: hreturn hlinefeed) hreturn hlinefeed hformfeed))
    (hreturn #\return)
    (hlinefeed #\newline)
    (hformfeed #\page)
    (hvertab #\vtab)
    (hspace #\space)
    (htab #\tab)
    (hcomment (:: hdashes (:? (:- hany hsymbol) (:* hany)) hnewline))
    (hdashes (:: "--" (:* "-")))
    (hany (:or hgraphic hspace htab))
    (hncomment nothing);(:: hopencom hANYseq (:* (:: hncomment hANYseq)) hclosecom))
    (hopencom "{-")
    (hANYseq (:- hANY (:: (:* hANY) (:* (:: hopencom hclosecom)) (:* hANY))))
    (hANY (:or hgraphic hwhitechar))
    (hclosecom "-}")
    
    (hexponent (:: (:or "e" "E") (:? (:or "+" "-")) hdecimal))
    (hdecimal (:: hdigit (:* hdigit)))
    (hdigit (:/ #\0 #\9))
    (hoctal (:: hoctit (:* hoctit)))
    (hoctit (:/ #\0 #\7))
    (hhexadecimal (:: hhexit (:* hhexit)))
    (hhexit (:or hdigit (:/ #\A #\F) (:/ #\a #\f)))
    
    (hgraphic (:or hsmall hlarge hsymbol hdigit hspecial ":" #\" "'"))
    (hsmall (:or (:/ #\a #\z) "_"))
    (hlarge (:or (:/ #\A #\Z)))
    (hsymbol (:or "~" "!" "@" "#" "$" "%" "^" "&" "*" "-" "+" "=" #\\ "|" "." "/" "<" ">" "?"))
    (hspecial (:or "(" ")" "," ";" "[" "]" "`" "{" "}"))
    
    (hescape (:: #\\ (:or hcharesc hascii hdecimal (:: "o" hoctal) (:: "x" hhexadecimal))))
    
    (hcharesc (:or "a" "b" "f" "n" "r" "t" "v" #\\ #\" "'" "&"))
    (hascii (:or (:: "^" hcntrl) "NUL" "SOH" "STX" "ETX" "EOT" "ENQ" "ACK" "BEL" "BS" "HT" "LF" "VT" "FF" "CR" "SO" "SI" "DLE" "DC1" "DC2" "DC3" "DC4" "NAK" "SYN" "ETB" "CAN" "EM" "SUB" "ESC" "FS" "GS" "RS" "US" "SP" "DEL"))
    (hcntrl (:or hlarge "@" "[" #\\ "]" "^" "_"))
    (hgap (:: #\\ hwhitechar (:* hwhitechar) #\\))
    
    (hreservedid (:or "case" "class" "data" "default" "deriving" "do" "else" "if" "import" "in" "infix" "infixl" "infixr" "instance" "let" "module" "newtype" "of" "then" "type" "where" "_"))
    (hreservedop (:or ":" "::" "=" #\\ "|" "->")))
  
  (define-empty-tokens keywords (eof t-backslash  t-case t-colon t-coloncolon t-comma t-else t-equal t-if t-import t-in t-lcbracket t-let t-lrbracket t-lsbracket t-module t-minus t-of t-rbracketcon t-rcbracket t-rrbracket t-rsbracket t-singlearrow t-sbracketcon t-semicolon t-then t-underscore t-where))
  
  (define-tokens regular (t-char t-conid t-consym t-float t-integer t-string t-varid t-varsym))
  
  (define haskell-lexer (lexer-src-pos (#\\ (token-t-backslash))
                                       ("case" (token-t-case))
                                       (":" (token-t-colon))
                                       ("::" (token-t-coloncolon))
                                       ("," (token-t-comma))
                                       ("else" (token-t-else))
                                       ("=" (token-t-equal))
                                       ("if" (token-t-if))
                                       ("import" (token-t-import))
                                       ("in" (token-t-in))
                                       ("{" (token-t-lcbracket))
                                       ("let" (token-t-let))
                                       ("(" (token-t-lrbracket))
                                       ("[" (token-t-lsbracket))
                                       ("module" (token-t-module))
                                       ("minus" (token-t-minus))
                                       ("of" (token-t-of))
                                       ("()" (token-t-rbracketcon))
                                       ("}" (token-t-rcbracket))
                                       (")" (token-t-rrbracket))
                                       ("]" (token-t-rsbracket))
                                       ("->" (token-t-singlearrow))
                                       ("[]" (token-t-sbracketcon))
                                       (";" (token-t-semicolon))
                                       ("then" (token-t-then))
                                       ("_" (token-t-underscore))
                                       ("where" (token-t-where))
                                       ((:: "'" (:or (:- hgraphic (:or "'" #\\)) hspace (:- hescape (:: #\\ "&")) "'")) (token-t-char lexeme))
                                       ((:: hlarge (:* (:or hsmall hlarge hdigit "'"))) (token-t-conid lexeme))
                                       ((:- (:: ":" (:* (:or hsymbol ":"))) hreservedop) (token-t-consym))
                                       ((:: hdecimal "." hdecimal (:? hexponent)) (token-t-float lexeme))
                                       ((:or hdecimal (:: "0o" hoctal) (:: "0O" hoctal) (:: "0x" hhexadecimal) (:: "0X" hhexadecimal)) (token-t-integer lexeme))
                                       ((:: #\" (:* (:or (:- hgraphic (:or #\" #\\)) hspace hescape hgap)) #\") (token-t-string lexeme))
                                       ((:- (:: hsmall (:* (:or hsmall hlarge hdigit "'"))) hreservedid) (token-t-varid lexeme))
                                       ((:- (:: hsymbol (:* (:or hsymbol ":"))) (:or hreservedop hdashes)) (token-t-varsym lexeme))
                                       (hwhitespace (return-without-pos (haskell-lexer input-port)))
                                       ((eof) (token-eof))))
  
  (define (haskell-parser source-name)
    (parser (src-pos)
            ;(debug "debug.txt")
            (tokens keywords regular)
            (start nt-module)
            (end eof)
            (error (lambda (token-ok token-name token-value start-pos end-pos)
                     (raise-read-error (format "parser: malformed token: source ~a, line ~a, column ~a: ~a: ~a"
                                               source-name
                                               (position-line start-pos)
                                               (position-col start-pos)
                                               token-name
                                               token-value)
                                       source-name
                                       (position-line start-pos)
                                       (position-col start-pos)
                                       (position-offset start-pos)
                                       (- (position-offset end-pos) (position-offset start-pos)))))
            (grammar (nt-module ((t-module nt-modid t-where nt-body) null)
                                ((nt-body) null))
                     (nt-modid ((t-conid) null))
                     (nt-body ((t-lcbracket nt-topdecls t-rcbracket) null))
                     (nt-topdecls (() null)
                                  ((nt-topdecl nt-topdecls-2) null))
                     (nt-topdecl ((nt-decl) null))
                     (nt-topdecls-2 (() null)
                                    ((t-semicolon nt-topdecl nt-topdecls-2) null))
                     (nt-decl ((nt-gendecl) null)
                              ((nt-decl-2 nt-rhs) null))
                     (nt-gendecl ((nt-vars t-coloncolon nt-type) null)
                                 (() null)) ;here
                     (nt-decl-2 ((nt-funlhs) null))
                     (nt-rhs ((t-equal nt-exp) null))
                     (nt-vars ((nt-var nt-vars-2) null))
                     (nt-type ((nt-btype nt-type-2) null))
                     (nt-funlhs ((nt-var nt-apat nt-funlhs-2) null)
                                ((t-lrbracket nt-funlhs t-rrbracket nt-apat nt-funlhs-2) null))
                     (nt-exp ((nt-exp t-coloncolon nt-type) null)
                             ((nt-lexp) null)
                             ((t-backslash nt-exp-2 t-singlearrow nt-exp) null)
                             ((t-let nt-decls t-in nt-exp) null)
                             ((t-if nt-exp t-then nt-exp t-else nt-exp) null)
                             ((t-case nt-exp t-of t-lcbracket nt-alts t-rcbracket) null)
                             ((nt-fexp) null))
                     (nt-var ((t-varid) null)
                             ((t-lrbracket t-varsym t-rrbracket) null))
                     (nt-vars-2 (() null)
                                ((t-comma nt-var nt-vars-2) null))
                     (nt-btype ((nt-btype-2 nt-atype) null))
                     (nt-type-2 (() null)
                                ((t-singlearrow nt-type) null))
                     (nt-apat ((nt-var) null)
                              ((t-underscore) null))
                     (nt-funlhs-2 (() null)
                                  ((nt-apat) null))
                     (nt-lexp ((t-minus nt-exp) null))
                     (nt-exp-2 ((nt-apat) null)
                               ((nt-apat nt-exp-2) null))
                     (nt-decls ((t-lcbracket nt-decls-2 t-rcbracket) null))
                     (nt-alts ((nt-alt nt-alts-2) null))
                     (nt-fexp ((nt-fexp-2 nt-aexp) null))
                     (nt-btype-2 (() null)
                                 ((nt-btype) null))
                     (nt-atype ((nt-tyvar) null)
                               ((t-lrbracket nt-type t-comma nt-type nt-atype-2 t-rrbracket) null)
                               ((t-lsbracket nt-type t-rsbracket) null))
                     (nt-decls-2 (() null)
                                 ((nt-decl nt-decls-3) null))
                     (nt-alt ((nt-pat t-singlearrow nt-exp) null))
                     (nt-alts-2 (() null)
                                ((t-semicolon nt-alt nt-alts-2) null))
                     (nt-fexp-2 (() null)
                                ((nt-fexp) null))
                     (nt-aexp ((nt-gcon) null)
                              ((nt-literal) null)
                              ((t-lrbracket nt-exp nt-aexp-2 t-rrbracket) null)
                              ((t-lsbracket nt-exp nt-aexp-2 t-rsbracket) null))
                     (nt-tyvar ((t-varid) null))
                     (nt-atype-2 (() null)
                                 ((t-comma nt-type nt-atype-2) null))
                     (nt-decls-3 (() null)
                                 ((t-semicolon nt-decl nt-decls-3) null))
                     (nt-pat ((nt-apat) null))
                     (nt-gcon ((t-rbracketcon) null)
                              ((t-sbracketcon) null)
                              ((t-lrbracket t-comma nt-gcon-2 t-rrbracket) null)
                              ((nt-qcon) null))
                     (nt-literal ((t-integer) null)
                                 ((t-float) null)
                                 ((t-char) null)
                                 ((t-string) null))
                     (nt-aexp-2 (() null)
                                ((t-comma nt-exp nt-aexp-2) null))
                     (nt-gcon-2 (() null)
                                ((t-comma nt-gcon-2) null))
                     (nt-qcon ((nt-qconid) null)
                              ((t-lrbracket nt-gconsym t-rrbracket) null))
                     (nt-qconid ((t-conid) null))
                     (nt-gconsym ((t-colon) null)
                                 ((nt-qconsym) null))
                     (nt-qconsym ((t-consym) null)))))
  
  (define (parse) ((haskell-parser "prompt") (lambda () (haskell-lexer (current-input-port)))))
  
  (define (prompt) (eval (compile-haskell (parse))))
  
  (define (wrap value) (vector (lambda () value) 'empty))
  
  (define (read-haskell-syntax) 'incomplete))